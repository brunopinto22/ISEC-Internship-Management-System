# Generated by Django 5.2.1 on 2025-06-11 17:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Candidature',
            fields=[
                ('id_candidature', models.AutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(choices=[('submitted', 'Submitted'), ('revision', 'Revision'), ('placed', 'Placed'), ('protocol_generated', 'Protocol Generated'), ('presidency_signature', 'ISEC Signature'), ('company_signature', 'Company Signature'), ('student_signature', 'Student Signature'), ('finished', 'Finished')], default='pending', max_length=20)),
                ('candidature_submission_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id_company', models.AutoField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=255)),
                ('company_email', models.EmailField(max_length=255)),
                ('company_address', models.CharField(max_length=255)),
                ('company_postal_code', models.CharField(max_length=10)),
                ('company_nipc', models.IntegerField()),
                ('company_website', models.CharField(blank=True, max_length=255, null=True)),
                ('company_linkedin', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id_course', models.AutoField(primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=255)),
                ('course_description', models.TextField(blank=True, null=True)),
                ('min_proposals', models.PositiveIntegerField()),
                ('max_proposals', models.PositiveIntegerField()),
                ('technologies_active', models.BooleanField()),
                ('methodologies_active', models.BooleanField()),
                ('objectives_active', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScientificArea',
            fields=[
                ('id_area', models.AutoField(primary_key=True, serialize=False)),
                ('area_name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('support_email', models.EmailField(max_length=255)),
                ('student_password', models.CharField(max_length=255)),
                ('teacher_password', models.CharField(max_length=255)),
                ('representative_password', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('student', 'Student'), ('representative', 'Company Representative'), ('teacher', 'Teacher')], default='student', max_length=50)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='protected/pfp/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id_calendar', models.AutoField(primary_key=True, serialize=False)),
                ('calendar_name', models.CharField(max_length=255)),
                ('submission_start', models.DateField()),
                ('submission_end', models.DateField()),
                ('divulgation', models.DateField()),
                ('candidatures', models.DateField()),
                ('placements', models.DateField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_calendars', to='api.course')),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id_branch', models.AutoField(primary_key=True, serialize=False)),
                ('branch_name', models.CharField(max_length=255)),
                ('branch_acronym', models.CharField(max_length=255)),
                ('color', models.CharField(blank=True, max_length=255, null=True)),
                ('id_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='api.course')),
            ],
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id_proposal', models.AutoField(primary_key=True, serialize=False)),
                ('proposal_title', models.CharField(max_length=255)),
                ('proposal_description', models.TextField()),
                ('proposal_selection_method', models.TextField()),
                ('proposal_conditions', models.TextField()),
                ('proposal_technologies', models.TextField(blank=True, null=True)),
                ('proposal_methodologies', models.TextField(blank=True, null=True)),
                ('proposal_objectives', models.TextField(blank=True, null=True)),
                ('proposal_type', models.CharField(choices=[('project', 'Project'), ('internship', 'Internship')], max_length=20)),
                ('work_format', models.CharField(choices=[('onsite', 'On-site'), ('remote', 'Remote'), ('hybrid', 'Hybrid')], max_length=10)),
                ('location', models.CharField(max_length=255)),
                ('schedule', models.CharField(max_length=100)),
                ('slots', models.PositiveIntegerField()),
                ('proposal_submission_date', models.DateField()),
                ('branches', models.ManyToManyField(blank=True, to='api.branch')),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_calendar', to='api.calendar')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_proposals', to='api.company')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.course')),
            ],
        ),
        migrations.CreateModel(
            name='CandidatureProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('candidature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidature_proposals', to='api.candidature')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposal_candidatures', to='api.proposal')),
            ],
        ),
        migrations.CreateModel(
            name='Representative',
            fields=[
                ('active', models.BooleanField(default=True)),
                ('id_representative', models.AutoField(primary_key=True, serialize=False)),
                ('representative_name', models.CharField(max_length=255)),
                ('representative_role', models.CharField(max_length=255)),
                ('representative_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representatives', to='api.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.accounts')),
            ],
        ),
        migrations.AddField(
            model_name='proposal',
            name='company_advisor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='company_advisor_proposals', to='api.representative'),
        ),
        migrations.AddField(
            model_name='company',
            name='company_admin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_company', to='api.representative'),
        ),
        migrations.AddField(
            model_name='course',
            name='scientific_area',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='api.scientificarea'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_number', models.IntegerField(primary_key=True, serialize=False)),
                ('student_name', models.CharField(max_length=255)),
                ('nationality', models.CharField(max_length=50)),
                ('ident_type', models.CharField(max_length=255)),
                ('ident_doc', models.IntegerField()),
                ('nif', models.IntegerField()),
                ('gender', models.CharField(blank=True, max_length=12, null=True)),
                ('address', models.CharField(max_length=255)),
                ('contact', models.CharField(blank=True, max_length=15, null=True)),
                ('current_year', models.IntegerField()),
                ('average', models.FloatField(null=True)),
                ('student_ects', models.IntegerField(null=True)),
                ('student_profile_picture', models.ImageField(blank=True, null=True, upload_to='protected/profile_pics/')),
                ('curriculum', models.ImageField(blank=True, null=True, upload_to='protected/curriculums/')),
                ('active', models.BooleanField(default=True)),
                ('student_branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_in_branch', to='api.branch')),
                ('student_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students_in_course', to='api.course')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.accounts')),
            ],
        ),
        migrations.AddField(
            model_name='proposal',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='student_proposals', to='api.student'),
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id_favorite', models.AutoField(primary_key=True, serialize=False)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.proposal')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.student')),
            ],
        ),
        migrations.AddField(
            model_name='candidature',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students_candidatures', to='api.student'),
        ),
        migrations.AddField(
            model_name='calendar',
            name='students',
            field=models.ManyToManyField(related_name='students_calendars', to='api.student'),
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subject_name', models.CharField(max_length=255)),
                ('state', models.IntegerField(choices=[(1, 'In Progress'), (2, 'Pending')], default=2)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='api.student')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id_teacher', models.AutoField(primary_key=True, serialize=False)),
                ('teacher_name', models.CharField(max_length=255)),
                ('teacher_category', models.CharField(max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('teacher_profile_picture', models.ImageField(blank=True, null=True, upload_to='protected/profile_pics/')),
                ('scientific_area', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.scientificarea')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.accounts')),
            ],
        ),
        migrations.AddField(
            model_name='proposal',
            name='isec_advisor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='isec_advisor_proposals', to='api.teacher'),
        ),
        migrations.AddField(
            model_name='course',
            name='admins',
            field=models.ManyToManyField(blank=True, related_name='courses', to='api.teacher'),
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view', models.BooleanField(default=False)),
                ('can_edit', models.BooleanField(default=False)),
                ('can_delete', models.BooleanField(default=False)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.module')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.teacher')),
            ],
            options={
                'unique_together': {('teacher', 'module')},
            },
        ),
    ]
